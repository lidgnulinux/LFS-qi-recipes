# Build recipe for libssh.
#
# Exit immediately on any error
set -e

program=libssh
version=0.10.4
release=1

# Define a category for the output of the package name
pkgcategory=libs

tarname=${program}-${version}.tar.xz

# Remote source(s)
fetch="https://www.libssh.org/files/${version%.*}/$tarname"

description="
A SSH (version 1) library.

The libssh package is a client-side C library implementing
the SSH (version 1) protocol.
"

homepage=https://www.libssh.org
license=BSD

# Source documentation
docs="AUTHORS BSD CHANGELOG CONTRIBUTING.md COPYING README*"
docsdir="${docdir}/${program}-${version}"

build()
{
    unpack "${tardir}/$tarname"

    cd "$srcdir"

    # Set sane permissions
    chmod -R u+w,go-w,a+rX-s .

    rm -rf BUILD
    mkdir BUILD
    cd BUILD

    cmake -DCMAKE_BUILD_TYPE=Release \
     -DCMAKE_C_FLAGS="$QICFLAGS"                                           \
     -DCMAKE_EXE_LINKER_FLAGS="$QILDFLAGS"                                 \
     -DCMAKE_SHARED_LINKER_FLAGS="$QILDFLAGS"                              \
     -DCMAKE_STATIC_LINKER_FLAGS="$QILDFLAGS"                              \
     -DCMAKE_INSTALL_PREFIX=/usr                                           \
     -DCMAKE_INSTALL_LIBDIR=lib                                \
     -DCMAKE_INSTALL_INFODIR=$infodir                                      \
     -DCMAKE_INSTALL_MANDIR=$mandir                                        \
     -DCMAKE_INSTALL_DOCDIR=$docsdir                                       \
     -DWITH_GSSAPI=OFF                                                     \
     -DUNIT_TESTING=OFF                                                    \
     -DWITH_GCRYPT=1                                                       \
     -DWITH_PCAP=1                                                         \
     -DWITH_SFTP=1                                                         \
     -DWITH_SERVER=0                                                       \
     -G Ninja ..

    ninja -j${jobs}
    DESTDIR="$destdir" ninja -j${jobs} install

    cd ..

    # Compress info documents deleting index file for the package
    if test -d "${destdir}/$infodir"
    then
        rm -f "${destdir}/${infodir}/dir"
        lzip -9 "${destdir}/${infodir}"/*
    fi

    # Compress and link man pages (if needed)
    if test -d "${destdir}/$mandir"
    then
        (
            cd "${destdir}/$mandir"
            find . -type f -exec lzip -9 {} +
            find . -type l | while read -r file
            do
                ln -sf "$(readlink -- "$file").lz" "${file}.lz"
                rm -- "$file"
            done
        )
    fi

    # Copy documentation
    mkdir -p "${destdir}/$docsdir"
    cp -p $docs "${destdir}/$docsdir"
}

